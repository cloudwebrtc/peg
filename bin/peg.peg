%{
import 'package:peg/grammar/expressions.dart';
import 'package:peg/grammar/grammar.dart';
import 'package:peg/grammar/production_rule.dart';

int _escape(int c) {
  switch (c) {
    case 110:
      return 10;      
    case 114:
      return 13;      
    case 116:
      return 9;
  }
  return c;
}

Expression _prefix(dynamic prefix, Expression expression, String action) {  
  switch (prefix) {
    case '&':
     expression = new AndPredicateExpression(expression);
     break;
    case '!':
     expression = new NotPredicateExpression(expression);
     break;        
  }
  expression.action = action;
  return expression;
}

Expression _suffix(String suffix, Expression expression) {
  switch (suffix) {
    case '?':
      return new OptionalExpression(expression);
    case '*':
      return  new ZeroOrMoreExpression(expression);
    case '+':
      return new OneOrMoreExpression(expression);        
  }
  return expression;
}

}%

### Sentences (nonterminals) ###

Grammar <-
  LEADING_SPACES? GLOBALS? MEMBERS? Definition+ EOF { $$ = new Grammar($4, $2, $3); }

Definition <-
  IDENTIFIER LEFTARROW Expression { $$ = new ProductionRule($1, $3); }

Expression <-
  Sequence (SLASH Sequence)* { $$ = new OrderedChoiceExpression(_list($1, $2)); }

Sequence <-
  Prefix+ { $$ = new SequenceExpression($1); }

Prefix <-
  (AND / NOT)? Suffix ACTION? { $$ = _prefix($1, $2, $3); }

Suffix <-
  Primary (QUESTION / STAR / PLUS)? { $$ = _suffix($2, $1); }

Primary <-
  IDENTIFIER !LEFTARROW { $$ = new RuleExpression($1); }
  / OPEN Expression CLOSE { $$ = $2; }
  / LITERAL
  / CLASS
  / DOT { $$ = new AnyCharacterExpression(); }

### Lexemes (tokens) ###

ACTION <-
  '{' ACTION_BODY* '}' SPACING { $$ = $2.join(); }

AND <-
  '&' SPACING { $$ = $1; }

CLASS <-
  '[' (!']' RANGE { $$ = $2; })* ']' SPACING { $$ = new CharacterClassExpression($2); }

CLOSE <-
  ')' SPACING

DOT <-
  '.' SPACING

EOF <-
  !.

GLOBALS <-
  '%{' GLOBALS_BODY* '}%' SPACING { $$ = $2.join(); }

IDENTIFIER <-
  IDENT_START IDENT_CONT* SPACING { $$ = _flatten([$1, $2]).join(); }

LEADING_SPACES <-
  SPACING

LEFTARROW <-
  '<-' SPACING

LITERAL <-
  '\'' (!'\'' CHAR { $$ = $2; })* '\''"i"? SPACING {
      $$ = new LiteralExpression(new String.fromCharCodes($2))..setIgnoreCase($4.toString() == 'i');
    }
  / '"' (!'"' CHAR { $$ = $2; })* '"'"i"? SPACING {
      $$ = new LiteralExpression(new String.fromCharCodes($2))..setIgnoreCase($4.toString() == 'i');
    }

MEMBERS <-
  '{' ACTION_BODY* '}' SPACING { $$ = $2.join(); }

NOT <-
  '!' SPACING { $$ = $1; }

OPEN <-
  '(' SPACING

PLUS <-
  '+' SPACING { $$ = $1; }

QUESTION <-
  '?' SPACING { $$ = $1; }

SLASH <-
  '/' SPACING

STAR <-
  '*' SPACING { $$ = $1; }

### Morphemes ###

ACTION_BODY <-
  '{' ACTION_BODY* '}' { $$ = _text(); }
  / !'}' . { $$ = _text(); }

CHAR <-
  '\\' ["'\-\[-\]nrt] { $$ = _escape($2.codeUnitAt(0)); }
  / HEX_NUMBER
  / !'\\' !EOL . { $$ = _toCodePoint($3); }

COMMENT <-
  '#' (!EOL .)* EOL?

EOL <-
  '\r\n'
  / [\n\r]

GLOBALS_BODY <-
  !'}%' . { $$ = _text(); }

HEX_NUMBER <-
  [\\] 'u' [0-9A-Fa-f]+ { $$ = int.parse($3.join(), radix: 16); }

IDENT_CONT <-
  IDENT_START
  / [0-9]

IDENT_START <-
  [A-Z_a-z]

RANGE <-
  CHAR '-' CHAR { $$ = [$1, $3]; }
  / CHAR { $$ = [$1, $1]; }

SPACE <-
  [\t ]
  / EOL

SPACING <-
  (SPACE / COMMENT)*

