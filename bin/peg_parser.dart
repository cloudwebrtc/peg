// This code was generated by a tool.
// Processing tool available at https://github.com/mezoni/peg

import 'package:peg/grammar/expressions.dart';
import 'package:peg/grammar/grammar.dart';
import 'package:peg/grammar/production_rule.dart';

int _escape(int c) {
  switch (c) {
    case 110:
      return 10;      
    case 114:
      return 13;      
    case 116:
      return 9;
  }
  return c;
}

Expression _prefix(dynamic prefix, Expression expression, String action, String label) {
  switch (prefix) {
    case '&':
     expression = new AndPredicateExpression(expression);
     break;
    case '!':
     expression = new NotPredicateExpression(expression);
     break;        
  }
  expression.action = action;
  if(label != null){
    expression.label = label;
    /*
    print('label => ' + label.toString());
    print('expression => ' + expression.toString());
    print('action => ' + action.toString());
    */
  }
  return expression;
}

Expression _suffix(String suffix, Expression expression) {
  switch (suffix) {
    case '?':
      return new OptionalExpression(expression);
    case '*':
      return  new ZeroOrMoreExpression(expression);
    case '+':
      return new OneOrMoreExpression(expression);        
  }
  return expression;
}

class PegParser {
  static final List<String> _ascii = new List<String>.generate(128, (c) => new String.fromCharCode(c));
  
  static final List<String> _expect0 = <String>["IDENTIFIER"];
  
  static final List<String> _expect1 = <String>["\'(\'", "\'.\'", "\'[\'", "IDENTIFIER", "LITERAL"];
  
  static final List<String> _expect10 = <String>["EOF"];
  
  static final List<String> _expect11 = <String>["\'%{\'"];
  
  static final List<String> _expect12 = <String>["LEADING_SPACES"];
  
  static final List<String> _expect13 = <String>["\'<-\'"];
  
  static final List<String> _expect14 = <String>["LITERAL"];
  
  static final List<String> _expect15 = <String>["LABEL"];
  
  static final List<String> _expect16 = <String>["\'!\'"];
  
  static final List<String> _expect17 = <String>["\'(\'"];
  
  static final List<String> _expect18 = <String>["\'+\'"];
  
  static final List<String> _expect19 = <String>["\'?\'"];
  
  static final List<String> _expect2 = <String>["\'/\'"];
  
  static final List<String> _expect20 = <String>["\'*\'"];
  
  static final List<String> _expect21 = <String>["#"];
  
  static final List<String> _expect22 = <String>[];
  
  static final List<String> _expect3 = <String>["\'!\'", "\'&\'"];
  
  static final List<String> _expect4 = <String>["\'*\'", "\'+\'", "\'?\'"];
  
  static final List<String> _expect5 = <String>["\'{\'"];
  
  static final List<String> _expect6 = <String>["\'&\'"];
  
  static final List<String> _expect7 = <String>["\'[\'"];
  
  static final List<String> _expect8 = <String>["\')\'"];
  
  static final List<String> _expect9 = <String>["\'.\'"];
  
  static final List<bool> _lookahead = _unmap([0x20e3, 0xffffffe, 0x1ffffffd, 0x7000020c, 0x68ffffff, 0x7fffffff, 0x7ffffc07, 0x7ffffa1f, 0x7fffffff, 0x7fffff81, 0x200004f]);
  
  static final List<bool> _mapping0 = _unmap([0x3ffffff, 0x7fffffe]);
  
  static final List<bool> _mapping1 = _unmap([0x821, 0x1c000000, 0x144000]);
  
  static final List<bool> _mapping2 = _unmap([0x9]);
  
  static final List<bool> _mapping3 = _unmap([0x7e03ff, 0xfc0000]);
  
  static final List<bool> _mapping4 = _unmap([0x43ffffff, 0x7fffffe]);
  
  static final List<bool> _mapping5 = _unmap([0x800001]);
  
  static final List<int> _strings0 = <int>[37, 123];
  
  static final List<int> _strings1 = <int>[125, 37];
  
  static final List<int> _strings2 = <int>[60, 45];
  
  static final List<int> _strings3 = <int>[13, 10];
  
  final List<String> _tokenAliases = ["\'{\'", "\'&\'", "\'[\'", "\')\'", "\'.\'", "EOF", "\'%{\'", "IDENTIFIER", "LEADING_SPACES", "\'<-\'", "LITERAL", "LABEL", "\'{\'", "\'!\'", "\'(\'", "\'+\'", "\'?\'", "\'/\'", "\'*\'"];
  
  final List<int> _tokenFlags = [1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1];
  
  final List<String> _tokenNames = ["ACTION", "AND", "CLASS", "CLOSE", "DOT", "EOF", "GLOBALS", "IDENTIFIER", "LEADING_SPACES", "LEFTARROW", "LITERAL", "LABEL", "MEMBERS", "NOT", "OPEN", "PLUS", "QUESTION", "SLASH", "STAR"];
  
  static final List<List<int>> _transitions0 = [[65, 90, 95, 95, 97, 1114111]];
  
  static final List<List<int>> _transitions1 = [[65, 90, 95, 95, 97, 122]];
  
  static final List<List<int>> _transitions10 = [[0, 122, 124, 1114111], [123, 123]];
  
  static final List<List<int>> _transitions11 = [[0, 91, 93, 1114111], [92, 92]];
  
  static final List<List<int>> _transitions12 = [[10, 10], [13, 13]];
  
  static final List<List<int>> _transitions13 = [[48, 57], [65, 90, 95, 95, 97, 122]];
  
  static final List<List<int>> _transitions14 = [[9, 9, 32, 32], [10, 10, 13, 13]];
  
  static final List<List<int>> _transitions15 = [[9, 10, 13, 13, 32, 32], [35, 35]];
  
  static final List<List<int>> _transitions2 = [[33, 34, 38, 40, 46, 46, 65, 91, 95, 95, 97, 122]];
  
  static final List<List<int>> _transitions3 = [[33, 33], [38, 38]];
  
  static final List<List<int>> _transitions4 = [[34, 34, 39, 40, 46, 46, 65, 91, 95, 95, 97, 122]];
  
  static final List<List<int>> _transitions5 = [[42, 42], [43, 43], [63, 63]];
  
  static final List<List<int>> _transitions6 = [[34, 34, 39, 39], [40, 40], [46, 46], [65, 90, 95, 95, 97, 122], [91, 91]];
  
  static final List<List<int>> _transitions7 = [[34, 34], [39, 39]];
  
  static final List<List<int>> _transitions8 = [[65, 90, 97, 122]];
  
  static final List<List<int>> _transitions9 = [[48, 57], [65, 90, 97, 122], [95, 95]];
  
  List<Map<int, List>> _cache;
  
  List<int> _cachePos;
  
  List<bool> _cacheable;
  
  int _ch;
  
  int _cursor;
  
  List<PegParserError> _errors;
  
  List<String> _expected;
  
  int _failurePos;
  
  List<int> _input;
  
  int _inputLen;
  
  int _startPos;
  
  int _testing;
  
  int _token;
  
  int _tokenStart;
  
  bool success;
  
  final String text;
  
  PegParser(this.text) {
    if (text == null) {
      throw new ArgumentError('text: $text');
    }    
    _input = _toCodePoints(text);
    _inputLen = _input.length;    
    reset(0);    
  }
  
  void _addToCache(dynamic result, int start, int id) {   
    var map = _cache[id];
    if (map == null) {
      map = <int, List>{};
      _cache[id] = map;
    }
    map[start] = [result, _cursor, success];      
  }
  
  void _failure([List<String> expected]) {  
    if (_failurePos > _cursor) {
      return;
    }
    if (_failurePos < _cursor) {    
      _expected = [];
     _failurePos = _cursor;
    }
    if (_token != null) {
      var alias = _tokenAliases[_token];
      var flag = _tokenFlags[_token];
      var name = _tokenNames[_token];
      if (_failurePos > _tokenStart && _failurePos == _inputLen && (flag & 1) != 0) {             
        var message = "Unterminated '$name'";
        _errors.add(new PegParserError(PegParserError.UNTERMINATED, _failurePos, _tokenStart, message));
        _expected.addAll(expected);            
      } else if (_failurePos > _tokenStart && (flag & 1) != 0) {             
        var message = "Malformed '$name'";
        _errors.add(new PegParserError(PegParserError.MALFORMED, _failurePos, _tokenStart, message));
        _expected.addAll(expected);            
      } else {
        _expected.add(alias);
      }            
    } else if (expected == null) {
      _expected.add(null);
    } else {
      _expected.addAll(expected);
    }   
  }
  
  List _flatten(dynamic value) {
    if (value is List) {
      var result = [];
      var length = value.length;
      for (var i = 0; i < length; i++) {
        var element = value[i];
        if (element is Iterable) {
          result.addAll(_flatten(element));
        } else {
          result.add(element);
        }
      }
      return result;
    } else if (value is Iterable) {
      var result = [];
      for (var element in value) {
        if (element is! List) {
          result.add(element);
        } else {
          result.addAll(_flatten(element));
        }
      }
    }
    return [value];
  }
  
  dynamic _getFromCache(int id) {  
    if (!_cacheable[id]) {  
      _cacheable[id] = true;  
      return null;
    }
    var map = _cache[id];
    if (map == null) {
      return null;
    }
    var data = map[_cursor];
    if (data == null) {
      return null;
    }
    _cursor = data[1];
    success = data[2];
    if (_cursor < _inputLen) {
      _ch = _input[_cursor];
    } else {
      _ch = -1;
    }
    return data;  
  }
  
  int _getState(List<List<int>> transitions) {
    var count = transitions.length;
    var state = 0;
    for ( ; state < count; state++) {
      var found = false;
      var ranges = transitions[state];    
      while (true) {
        var right = ranges.length ~/ 2;
        if (right == 0) {
          break;
        }
        var left = 0;
        if (right == 1) {
          if (_ch <= ranges[1] && _ch >= ranges[0]) {
            found = true;          
          }
          break;
        }
        int middle;
        while (left < right) {
          middle = (left + right) >> 1;
          var index = middle << 1;
          if (ranges[index + 1] < _ch) {
            left = middle + 1;
          } else {
            if (_ch >= ranges[index]) {
              found = true;
              break;
            }
            right = middle;
          }
        }
        break;
      }
      if (found) {
        return state; 
      }   
    }
    if (_ch != -1) {
      return state;
    }
    return state + 1;  
  }
  
  List _list(Object first, List next) {
    var length = next.length;
    var list = new List(length + 1);
    list[0] = first;
    for (var i = 0; i < length; i++) {
      list[i + 1] = next[i][1];
    }
    return list;
  }
  
  String _matchAny() {
    success = _cursor < _inputLen;
    if (success) {
      String result;
      if (_ch < 128) {
        result = _ascii[_ch];  
      } else {
        result = new String.fromCharCode(_ch);
      }    
      if (++_cursor < _inputLen) {
        _ch = _input[_cursor];
      } else {
        _ch = -1;
      }    
      return result;
    }    
    return null;  
  }
  
  String _matchChar(int ch, String string) {
    success = _ch == ch;
    if (success) {
      var result = string;  
      if (++_cursor < _inputLen) {
        _ch = _input[_cursor];
      } else {
        _ch = -1;
      }    
      return result;
    }  
    return null;  
  }
  
  String _matchMapping(int start, int end, List<bool> mapping) {
    success = _ch >= start && _ch <= end;
    if (success) {    
      if(mapping[_ch - start]) {
        String result;
        if (_ch < 128) {
          result = _ascii[_ch];  
        } else {
          result = new String.fromCharCode(_ch);
        }     
        if (++_cursor < _inputLen) {
          _ch = _input[_cursor];
        } else {
          _ch = -1;
        }      
        return result;
      }
      success = false;
    }  
    return null;  
  }
  
  String _matchRange(int start, int end) {
    success = _ch >= start && _ch <= end;
    if (success) {
      String result;
      if (_ch < 128) {
        result = _ascii[_ch];  
      } else {
        result = new String.fromCharCode(_ch);
      }        
      if (++_cursor < _inputLen) {
        _ch = _input[_cursor];
      } else {
        _ch = -1;
      }  
      return result;
    }  
    return null;  
  }
  
  String _matchRanges(List<int> ranges) {
    var length = ranges.length;
    for (var i = 0; i < length; i += 2) {    
      if (_ch >= ranges[i]) {
        if (_ch <= ranges[i + 1]) {
          String result;
          if (_ch < 128) {
            result = _ascii[_ch];  
          } else {
            result = new String.fromCharCode(_ch);
          }          
          if (++_cursor < _inputLen) {
            _ch = _input[_cursor];
          } else {
             _ch = -1;
          }
          success = true;    
          return result;
        }      
      } else break;  
    }
    success = false;  
    return null;  
  }
  
  String _matchString(List<int> codePoints, String string, [bool ignoreCase = false]) {
    var length = codePoints.length;
    success = _cursor + length <= _inputLen;
    if (success) {
      for (var i = 0; i < length; i++) {
        if(ignoreCase){
          if (String.fromCharCode(codePoints[i]).toLowerCase()
              != String.fromCharCode(_input[_cursor + i]).toLowerCase()) {
            success = false;
            break;
          }
        }else{
          if (codePoints[i] != _input[_cursor + i]) {
            success = false;
            break;
          }
        }
      }
    } else {
      success = false;
    }  
    if (success) {
      _cursor += length;      
      if (_cursor < _inputLen) {
        _ch = _input[_cursor];
      } else {
        _ch = -1;
      }    
      return string;      
    }  
    return null; 
  }
  
  void _nextChar() {
    if (++_cursor < _inputLen) {
      _ch = _input[_cursor];
    } else {
      _ch = -1;
    }  
  }
  
  dynamic _parse_ACTION() {
    var $$;
    _token = 0;  
    _tokenStart = _cursor;  
    switch (_ch == 123 ? 0 : _ch == -1 ? 2 : 1) {
      case 0:
      case 2:
        var ch0 = _ch, pos0 = _cursor, startPos0 = _startPos;
        _startPos = _cursor;
        while (true) {  
          $$ = _matchChar(123, '{');
          if (!success) break;
          var seq = new List(4)..[0] = $$;
          var testing0 = _testing; 
          for (var reps = []; ; ) {
            _testing = _cursor;
            $$ = _parse_ACTION_BODY();
            if (success) {  
              reps.add($$);
            } else {
              success = true;
              _testing = testing0;
              $$ = reps;
              break; 
            }
          }
          if (!success) break;
          seq[1] = $$;
          $$ = _matchChar(125, '}');
          if (!success) break;
          seq[2] = $$;
          $$ = _parse_SPACING();
          if (!success) break;
          seq[3] = $$;
          $$ = seq;
          if (success) {    
            final $1 = seq[0];
            final $2 = seq[1];
            final $3 = seq[2];
            final $4 = seq[3];
            final $start = startPos0;
            var pos0 = _startPos, offset = $start;
            {
            ///CODE_START
            $$ = $2.join();
            ///CODE_END
            }
          }
          break;
        }
        if (!success) {
          _ch = ch0;
          _cursor = pos0;
        }
        _startPos = startPos0;
        break;
      case 1:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      _failure(_expect5);
    }
    _token = null;
    _tokenStart = null;
    return $$;
  }
  
  dynamic _parse_ACTION_BODY() {
    var $$;
    switch (_getState(_transitions10)) {
      case 0:
        var ch0 = _ch, pos0 = _cursor, startPos0 = _startPos;
        _startPos = _cursor;
        while (true) {  
          var ch1 = _ch, pos1 = _cursor, testing0 = _testing; 
          _testing = _inputLen + 1;
          $$ = _matchChar(125, '}');
          _ch = ch1;
          _cursor = pos1; 
          _testing = testing0;
          $$ = null;
          success = !success;
          if (!success) break;
          var seq = new List(2)..[0] = $$;
          $$ = _matchAny();
          if (!success) break;
          seq[1] = $$;
          $$ = seq;
          if (success) {    
            final $1 = seq[0];
            final $2 = seq[1];
            final $start = startPos0;
            var pos0 = _startPos, offset = $start;
            {
            ///CODE_START
            $$ = _text();
            ///CODE_END
            }
          }
          break;
        }
        if (!success) {
          _ch = ch0;
          _cursor = pos0;
        }
        _startPos = startPos0;
        break;
      case 1:
      case 3:
        while (true) {
          var ch2 = _ch, pos2 = _cursor, startPos1 = _startPos;
          _startPos = _cursor;
          while (true) {  
            $$ = _matchChar(123, '{');
            if (!success) break;
            var seq = new List(3)..[0] = $$;
            var testing1 = _testing; 
            for (var reps = []; ; ) {
              _testing = _cursor;
              $$ = _parse_ACTION_BODY();
              if (success) {  
                reps.add($$);
              } else {
                success = true;
                _testing = testing1;
                $$ = reps;
                break; 
              }
            }
            if (!success) break;
            seq[1] = $$;
            $$ = _matchChar(125, '}');
            if (!success) break;
            seq[2] = $$;
            $$ = seq;
            if (success) {    
              final $1 = seq[0];
              final $2 = seq[1];
              final $3 = seq[2];
              final $start = startPos1;
              var pos0 = _startPos, offset = $start;
              {
              ///CODE_START
              $$ = _text();
              ///CODE_END
              }
            }
            break;
          }
          if (!success) {
            _ch = ch2;
            _cursor = pos2;
          }
          _startPos = startPos1;
          if (success) break;
          var ch3 = _ch, pos3 = _cursor, startPos2 = _startPos;
          _startPos = _cursor;
          while (true) {  
            var ch4 = _ch, pos4 = _cursor, testing2 = _testing; 
            _testing = _inputLen + 1;
            $$ = _matchChar(125, '}');
            _ch = ch4;
            _cursor = pos4; 
            _testing = testing2;
            $$ = null;
            success = !success;
            if (!success) break;
            var seq = new List(2)..[0] = $$;
            $$ = _matchAny();
            if (!success) break;
            seq[1] = $$;
            $$ = seq;
            if (success) {    
              final $1 = seq[0];
              final $2 = seq[1];
              final $start = startPos2;
              var pos0 = _startPos, offset = $start;
              {
              ///CODE_START
              $$ = _text();
              ///CODE_END
              }
            }
            break;
          }
          if (!success) {
            _ch = ch3;
            _cursor = pos3;
          }
          _startPos = startPos2;
          break;
        }
        break;
      case 2:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      _failure(const [null]);
    }
    return $$;
  }
  
  dynamic _parse_ALPHA() {
    var $$;
    switch (_getState(_transitions8)) {
      case 0:
        var startPos0 = _startPos;
        _startPos = _cursor;
        $$ = _matchMapping(65, 122, _mapping0);
        _startPos = startPos0;
        break;
      case 1:
      case 2:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      _failure(const [null]);
    }
    return $$;
  }
  
  dynamic _parse_AND() {
    var $$;
    _token = 1;  
    _tokenStart = _cursor;  
    switch (_ch == 38 ? 0 : _ch == -1 ? 2 : 1) {
      case 0:
      case 2:
        var ch0 = _ch, pos0 = _cursor, startPos0 = _startPos;
        _startPos = _cursor;
        while (true) {  
          $$ = _matchChar(38, '&');
          if (!success) break;
          var seq = new List(2)..[0] = $$;
          $$ = _parse_SPACING();
          if (!success) break;
          seq[1] = $$;
          $$ = seq;
          if (success) {    
            final $1 = seq[0];
            final $2 = seq[1];
            final $start = startPos0;
            var pos0 = _startPos, offset = $start;
            {
            ///CODE_START
            $$ = $1;
            ///CODE_END
            }
          }
          break;
        }
        if (!success) {
          _ch = ch0;
          _cursor = pos0;
        }
        _startPos = startPos0;
        break;
      case 1:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      _failure(_expect6);
    }
    _token = null;
    _tokenStart = null;
    return $$;
  }
  
  dynamic _parse_CHAR() {
    var $$;
    switch (_getState(_transitions11)) {
      case 0:
      case 3:
        var ch0 = _ch, pos0 = _cursor, startPos0 = _startPos;
        _startPos = _cursor;
        while (true) {  
          var ch1 = _ch, pos1 = _cursor, testing0 = _testing; 
          _testing = _inputLen + 1;
          $$ = _matchChar(92, '\\');
          _ch = ch1;
          _cursor = pos1; 
          _testing = testing0;
          $$ = null;
          success = !success;
          if (!success) break;
          var seq = new List(3)..[0] = $$;
          var ch2 = _ch, pos2 = _cursor, testing1 = _testing; 
          _testing = _inputLen + 1;
          $$ = _parse_EOL();
          _ch = ch2;
          _cursor = pos2; 
          _testing = testing1;
          $$ = null;
          success = !success;
          if (!success) break;
          seq[1] = $$;
          $$ = _matchAny();
          if (!success) break;
          seq[2] = $$;
          $$ = seq;
          if (success) {    
            final $1 = seq[0];
            final $2 = seq[1];
            final $3 = seq[2];
            final $start = startPos0;
            var pos0 = _startPos, offset = $start;
            {
            ///CODE_START
            $$ = _toCodePoint($3);
            ///CODE_END
            }
          }
          break;
        }
        if (!success) {
          _ch = ch0;
          _cursor = pos0;
        }
        _startPos = startPos0;
        break;
      case 1:
        while (true) {
          var ch3 = _ch, pos3 = _cursor, startPos1 = _startPos;
          _startPos = _cursor;
          while (true) {  
            $$ = _matchChar(92, '\\');
            if (!success) break;
            var seq = new List(2)..[0] = $$;
            $$ = _matchMapping(34, 116, _mapping1);
            if (!success) break;
            seq[1] = $$;
            $$ = seq;
            if (success) {    
              final $1 = seq[0];
              final $2 = seq[1];
              final $start = startPos1;
              var pos0 = _startPos, offset = $start;
              {
              ///CODE_START
              $$ = _escape($2.codeUnitAt(0));
              ///CODE_END
              }
            }
            break;
          }
          if (!success) {
            _ch = ch3;
            _cursor = pos3;
          }
          _startPos = startPos1;
          if (success) break;
          var startPos2 = _startPos;
          _startPos = _cursor;
          $$ = _parse_HEX_NUMBER();
          _startPos = startPos2;
          if (success) break;
          var ch4 = _ch, pos4 = _cursor, startPos3 = _startPos;
          _startPos = _cursor;
          while (true) {  
            var ch5 = _ch, pos5 = _cursor, testing2 = _testing; 
            _testing = _inputLen + 1;
            $$ = _matchChar(92, '\\');
            _ch = ch5;
            _cursor = pos5; 
            _testing = testing2;
            $$ = null;
            success = !success;
            if (!success) break;
            var seq = new List(3)..[0] = $$;
            var ch6 = _ch, pos6 = _cursor, testing3 = _testing; 
            _testing = _inputLen + 1;
            $$ = _parse_EOL();
            _ch = ch6;
            _cursor = pos6; 
            _testing = testing3;
            $$ = null;
            success = !success;
            if (!success) break;
            seq[1] = $$;
            $$ = _matchAny();
            if (!success) break;
            seq[2] = $$;
            $$ = seq;
            if (success) {    
              final $1 = seq[0];
              final $2 = seq[1];
              final $3 = seq[2];
              final $start = startPos3;
              var pos0 = _startPos, offset = $start;
              {
              ///CODE_START
              $$ = _toCodePoint($3);
              ///CODE_END
              }
            }
            break;
          }
          if (!success) {
            _ch = ch4;
            _cursor = pos4;
          }
          _startPos = startPos3;
          break;
        }
        break;
      case 2:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      _failure(const [null]);
    }
    return $$;
  }
  
  dynamic _parse_CLASS() {
    var $$;
    _token = 2;  
    _tokenStart = _cursor;  
    switch (_ch == 91 ? 0 : _ch == -1 ? 2 : 1) {
      case 0:
      case 2:
        var ch0 = _ch, pos0 = _cursor, startPos0 = _startPos;
        _startPos = _cursor;
        while (true) {  
          $$ = _matchChar(91, '[');
          if (!success) break;
          var seq = new List(4)..[0] = $$;
          var testing0 = _testing; 
          for (var reps = []; ; ) {
            _testing = _cursor;
            switch (_ch >= 0 && _ch <= 1114111 ? 0 : _ch == -1 ? 2 : 1) {
              case 0:
              case 2:
                var ch1 = _ch, pos1 = _cursor, startPos1 = _startPos;
                _startPos = _cursor;
                while (true) {  
                  var ch2 = _ch, pos2 = _cursor, testing1 = _testing; 
                  _testing = _inputLen + 1;
                  $$ = _matchChar(93, ']');
                  _ch = ch2;
                  _cursor = pos2; 
                  _testing = testing1;
                  $$ = null;
                  success = !success;
                  if (!success) break;
                  var seq = new List(2)..[0] = $$;
                  $$ = _parse_RANGE();
                  if (!success) break;
                  seq[1] = $$;
                  $$ = seq;
                  if (success) {    
                    final $1 = seq[0];
                    final $2 = seq[1];
                    final $start = startPos1;
                    var pos0 = _startPos, offset = $start;
                    {
                    ///CODE_START
                    $$ = $2;
                    ///CODE_END
                    }
                  }
                  break;
                }
                if (!success) {
                  _ch = ch1;
                  _cursor = pos1;
                }
                _startPos = startPos1;
                break;
              case 1:
                $$ = null;
                success = false;
                break;
            }
            if (!success && _cursor > _testing) {
              _failure(const [null]);
            }
            if (success) {  
              reps.add($$);
            } else {
              success = true;
              _testing = testing0;
              $$ = reps;
              break; 
            }
          }
          if (!success) break;
          seq[1] = $$;
          $$ = _matchChar(93, ']');
          if (!success) break;
          seq[2] = $$;
          $$ = _parse_SPACING();
          if (!success) break;
          seq[3] = $$;
          $$ = seq;
          if (success) {    
            final $1 = seq[0];
            final $2 = seq[1];
            final $3 = seq[2];
            final $4 = seq[3];
            final $start = startPos0;
            var pos0 = _startPos, offset = $start;
            {
            ///CODE_START
            $$ = new CharacterClassExpression($2);
            ///CODE_END
            }
          }
          break;
        }
        if (!success) {
          _ch = ch0;
          _cursor = pos0;
        }
        _startPos = startPos0;
        break;
      case 1:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      _failure(_expect7);
    }
    _token = null;
    _tokenStart = null;
    return $$;
  }
  
  dynamic _parse_CLOSE() {
    var $$;
    _token = 3;  
    _tokenStart = _cursor;  
    switch (_ch == 41 ? 0 : _ch == -1 ? 2 : 1) {
      case 0:
      case 2:
        var ch0 = _ch, pos0 = _cursor, startPos0 = _startPos;
        _startPos = _cursor;
        while (true) {  
          $$ = _matchChar(41, ')');
          if (!success) break;
          var seq = new List(2)..[0] = $$;
          $$ = _parse_SPACING();
          if (!success) break;
          seq[1] = $$;
          $$ = seq;
          break;
        }
        if (!success) {
          _ch = ch0;
          _cursor = pos0;
        }
        _startPos = startPos0;
        break;
      case 1:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      _failure(_expect8);
    }
    _token = null;
    _tokenStart = null;
    return $$;
  }
  
  dynamic _parse_COMMENT() {
    var $$;
    switch (_ch == 35 ? 0 : _ch == -1 ? 2 : 1) {
      case 0:
      case 2:
        var ch0 = _ch, pos0 = _cursor, startPos0 = _startPos;
        _startPos = _cursor;
        while (true) {  
          $$ = _matchChar(35, '#');
          if (!success) break;
          var seq = new List(3)..[0] = $$;
          var testing0 = _testing; 
          for (var reps = []; ; ) {
            _testing = _cursor;
            switch (_ch >= 0 && _ch <= 1114111 ? 0 : _ch == -1 ? 2 : 1) {
              case 0:
              case 2:
                var ch1 = _ch, pos1 = _cursor, startPos1 = _startPos;
                _startPos = _cursor;
                while (true) {  
                  var ch2 = _ch, pos2 = _cursor, testing1 = _testing; 
                  _testing = _inputLen + 1;
                  $$ = _parse_EOL();
                  _ch = ch2;
                  _cursor = pos2; 
                  _testing = testing1;
                  $$ = null;
                  success = !success;
                  if (!success) break;
                  var seq = new List(2)..[0] = $$;
                  $$ = _matchAny();
                  if (!success) break;
                  seq[1] = $$;
                  $$ = seq;
                  break;
                }
                if (!success) {
                  _ch = ch1;
                  _cursor = pos1;
                }
                _startPos = startPos1;
                break;
              case 1:
                $$ = null;
                success = false;
                break;
            }
            if (!success && _cursor > _testing) {
              _failure(const [null]);
            }
            if (success) {  
              reps.add($$);
            } else {
              success = true;
              _testing = testing0;
              $$ = reps;
              break; 
            }
          }
          if (!success) break;
          seq[1] = $$;
          var testing2 = _testing;
          _testing = _cursor;
          $$ = _parse_EOL();
          success = true; 
          _testing = testing2;
          if (!success) break;
          seq[2] = $$;
          $$ = seq;
          break;
        }
        if (!success) {
          _ch = ch0;
          _cursor = pos0;
        }
        _startPos = startPos0;
        break;
      case 1:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      _failure(_expect21);
    }
    return $$;
  }
  
  dynamic _parse_DIGIT() {
    var $$;
    switch (_ch >= 48 && _ch <= 57 ? 0 : _ch == -1 ? 2 : 1) {
      case 0:
        var startPos0 = _startPos;
        _startPos = _cursor;
        $$ = _matchRange(48, 57);
        _startPos = startPos0;
        break;
      case 1:
      case 2:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      _failure(const [null]);
    }
    return $$;
  }
  
  dynamic _parse_DOT() {
    var $$;
    _token = 4;  
    _tokenStart = _cursor;  
    switch (_ch == 46 ? 0 : _ch == -1 ? 2 : 1) {
      case 0:
      case 2:
        var ch0 = _ch, pos0 = _cursor, startPos0 = _startPos;
        _startPos = _cursor;
        while (true) {  
          $$ = _matchChar(46, '.');
          if (!success) break;
          var seq = new List(2)..[0] = $$;
          $$ = _parse_SPACING();
          if (!success) break;
          seq[1] = $$;
          $$ = seq;
          break;
        }
        if (!success) {
          _ch = ch0;
          _cursor = pos0;
        }
        _startPos = startPos0;
        break;
      case 1:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      _failure(_expect9);
    }
    _token = null;
    _tokenStart = null;
    return $$;
  }
  
  dynamic _parse_Definition() {
    var $$;
    switch (_getState(_transitions1)) {
      case 0:
      case 2:
        var ch0 = _ch, pos0 = _cursor, startPos0 = _startPos;
        _startPos = _cursor;
        while (true) {  
          $$ = _parse_IDENTIFIER();
          if (!success) break;
          var seq = new List(3)..[0] = $$;
          $$ = _parse_LEFTARROW();
          if (!success) break;
          seq[1] = $$;
          $$ = _parse_Expression();
          if (!success) break;
          seq[2] = $$;
          $$ = seq;
          if (success) {    
            final $1 = seq[0];
            final $2 = seq[1];
            final $3 = seq[2];
            final $start = startPos0;
            var pos0 = _startPos, offset = $start;
            {
            ///CODE_START
            $$ = new ProductionRule($1, $3);
            ///CODE_END
            }
          }
          break;
        }
        if (!success) {
          _ch = ch0;
          _cursor = pos0;
        }
        _startPos = startPos0;
        break;
      case 1:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      _failure(_expect0);
    }
    return $$;
  }
  
  dynamic _parse_EOF() {
    var $$;
    _token = 5;  
    _tokenStart = _cursor;  
    switch (_ch >= 0 && _ch <= 1114111 ? 0 : _ch == -1 ? 2 : 1) {
      case 0:
      case 2:
        var startPos0 = _startPos;
        _startPos = _cursor;
        var ch0 = _ch, pos0 = _cursor, testing0 = _testing; 
        _testing = _inputLen + 1;
        $$ = _matchAny();
        _ch = ch0;
        _cursor = pos0; 
        _testing = testing0;
        $$ = null;
        success = !success;
        _startPos = startPos0;
        break;
      case 1:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      _failure(_expect10);
    }
    _token = null;
    _tokenStart = null;
    return $$;
  }
  
  dynamic _parse_EOL() {
    var $$;
    switch (_getState(_transitions12)) {
      case 0:
        var startPos0 = _startPos;
        _startPos = _cursor;
        $$ = _matchMapping(10, 13, _mapping2);
        _startPos = startPos0;
        break;
      case 1:
        while (true) {
          var startPos1 = _startPos;
          _startPos = _cursor;
          $$ = _matchString(_strings3, '\r\n', false);
          _startPos = startPos1;
          if (success) break;
          var startPos2 = _startPos;
          _startPos = _cursor;
          $$ = _matchMapping(10, 13, _mapping2);
          _startPos = startPos2;
          break;
        }
        break;
      case 2:
      case 3:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      _failure(const [null]);
    }
    return $$;
  }
  
  dynamic _parse_Expression() {
    var $$;          
    var pos = _cursor;             
    if(_cachePos[2] >= pos) {
      $$ = _getFromCache(2);
      if($$ != null) {
        return $$[0];       
      }
    } else {
      _cachePos[2] = pos;
    }  
    switch (_getState(_transitions2)) {
      case 0:
      case 2:
        var ch0 = _ch, pos0 = _cursor, startPos0 = _startPos;
        _startPos = _cursor;
        while (true) {  
          $$ = _parse_Sequence();
          if (!success) break;
          var seq = new List(2)..[0] = $$;
          var testing0 = _testing; 
          for (var reps = []; ; ) {
            _testing = _cursor;
            switch (_ch == 47 ? 0 : _ch == -1 ? 2 : 1) {
              case 0:
              case 2:
                var ch1 = _ch, pos1 = _cursor, startPos1 = _startPos;
                _startPos = _cursor;
                while (true) {  
                  $$ = _parse_SLASH();
                  if (!success) break;
                  var seq = new List(2)..[0] = $$;
                  $$ = _parse_Sequence();
                  if (!success) break;
                  seq[1] = $$;
                  $$ = seq;
                  break;
                }
                if (!success) {
                  _ch = ch1;
                  _cursor = pos1;
                }
                _startPos = startPos1;
                break;
              case 1:
                $$ = null;
                success = false;
                break;
            }
            if (!success && _cursor > _testing) {
              _failure(_expect2);
            }
            if (success) {  
              reps.add($$);
            } else {
              success = true;
              _testing = testing0;
              $$ = reps;
              break; 
            }
          }
          if (!success) break;
          seq[1] = $$;
          $$ = seq;
          if (success) {    
            final $1 = seq[0];
            final $2 = seq[1];
            final $start = startPos0;
            var pos0 = _startPos, offset = $start;
            {
            ///CODE_START
            $$ = new OrderedChoiceExpression(_list($1, $2));
            ///CODE_END
            }
          }
          break;
        }
        if (!success) {
          _ch = ch0;
          _cursor = pos0;
        }
        _startPos = startPos0;
        break;
      case 1:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      _failure(_expect1);
    }
    if (_cacheable[2]) {
      _addToCache($$, pos, 2);
    }    
    return $$;
  }
  
  dynamic _parse_GLOBALS() {
    var $$;
    _token = 6;  
    _tokenStart = _cursor;  
    switch (_ch == 37 ? 0 : _ch == -1 ? 2 : 1) {
      case 0:
      case 2:
        var ch0 = _ch, pos0 = _cursor, startPos0 = _startPos;
        _startPos = _cursor;
        while (true) {  
          $$ = _matchString(_strings0, '%{', false);
          if (!success) break;
          var seq = new List(4)..[0] = $$;
          var testing0 = _testing; 
          for (var reps = []; ; ) {
            _testing = _cursor;
            $$ = _parse_GLOBALS_BODY();
            if (success) {  
              reps.add($$);
            } else {
              success = true;
              _testing = testing0;
              $$ = reps;
              break; 
            }
          }
          if (!success) break;
          seq[1] = $$;
          $$ = _matchString(_strings1, '}%', false);
          if (!success) break;
          seq[2] = $$;
          $$ = _parse_SPACING();
          if (!success) break;
          seq[3] = $$;
          $$ = seq;
          if (success) {    
            final $1 = seq[0];
            final $2 = seq[1];
            final $3 = seq[2];
            final $4 = seq[3];
            final $start = startPos0;
            var pos0 = _startPos, offset = $start;
            {
            ///CODE_START
            $$ = $2.join();
            ///CODE_END
            }
          }
          break;
        }
        if (!success) {
          _ch = ch0;
          _cursor = pos0;
        }
        _startPos = startPos0;
        break;
      case 1:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      _failure(_expect11);
    }
    _token = null;
    _tokenStart = null;
    return $$;
  }
  
  dynamic _parse_GLOBALS_BODY() {
    var $$;
    switch (_ch >= 0 && _ch <= 1114111 ? 0 : _ch == -1 ? 2 : 1) {
      case 0:
      case 2:
        var ch0 = _ch, pos0 = _cursor, startPos0 = _startPos;
        _startPos = _cursor;
        while (true) {  
          var ch1 = _ch, pos1 = _cursor, testing0 = _testing; 
          _testing = _inputLen + 1;
          $$ = _matchString(_strings1, '}%', false);
          _ch = ch1;
          _cursor = pos1; 
          _testing = testing0;
          $$ = null;
          success = !success;
          if (!success) break;
          var seq = new List(2)..[0] = $$;
          $$ = _matchAny();
          if (!success) break;
          seq[1] = $$;
          $$ = seq;
          if (success) {    
            final $1 = seq[0];
            final $2 = seq[1];
            final $start = startPos0;
            var pos0 = _startPos, offset = $start;
            {
            ///CODE_START
            $$ = _text();
            ///CODE_END
            }
          }
          break;
        }
        if (!success) {
          _ch = ch0;
          _cursor = pos0;
        }
        _startPos = startPos0;
        break;
      case 1:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      _failure(const [null]);
    }
    return $$;
  }
  
  dynamic _parse_HEX_NUMBER() {
    var $$;
    switch (_ch == 92 ? 0 : _ch == -1 ? 2 : 1) {
      case 0:
        while (true) {
          var ch0 = _ch, pos0 = _cursor, startPos0 = _startPos;
          _startPos = _cursor;
          while (true) {  
            $$ = _matchChar(92, '\\');
            if (!success) break;
            var seq = new List(3)..[0] = $$;
            $$ = _matchChar(117, 'u');
            if (!success) break;
            seq[1] = $$;
            var testing0;
            for (var first = true, reps; ;) {  
              $$ = _matchMapping(48, 102, _mapping3);  
              if (success) {
               if (first) {      
                  first = false;
                  reps = [$$];
                  testing0 = _testing;                  
                } else {
                  reps.add($$);
                }
                _testing = _cursor;   
              } else {
                success = !first;
                if (success) {      
                  _testing = testing0;
                  $$ = reps;      
                } else $$ = null;
                break;
              }  
            }
            if (!success) break;
            seq[2] = $$;
            $$ = seq;
            if (success) {    
              final $1 = seq[0];
              final $2 = seq[1];
              final $3 = seq[2];
              final $start = startPos0;
              var pos0 = _startPos, offset = $start;
              {
              ///CODE_START
              $$ = int.parse($3.join(), radix: 16);
              ///CODE_END
              }
            }
            break;
          }
          if (!success) {
            _ch = ch0;
            _cursor = pos0;
          }
          _startPos = startPos0;
          if (success) break;
          var ch1 = _ch, pos1 = _cursor, startPos1 = _startPos;
          _startPos = _cursor;
          while (true) {  
            $$ = _matchChar(92, '\\');
            if (!success) break;
            var seq = new List(3)..[0] = $$;
            $$ = _matchChar(120, 'x');
            if (!success) break;
            seq[1] = $$;
            var testing1;
            for (var first = true, reps; ;) {  
              $$ = _matchMapping(48, 102, _mapping3);  
              if (success) {
               if (first) {      
                  first = false;
                  reps = [$$];
                  testing1 = _testing;                  
                } else {
                  reps.add($$);
                }
                _testing = _cursor;   
              } else {
                success = !first;
                if (success) {      
                  _testing = testing1;
                  $$ = reps;      
                } else $$ = null;
                break;
              }  
            }
            if (!success) break;
            seq[2] = $$;
            $$ = seq;
            if (success) {    
              final $1 = seq[0];
              final $2 = seq[1];
              final $3 = seq[2];
              final $start = startPos1;
              var pos0 = _startPos, offset = $start;
              {
              ///CODE_START
              $$ = int.parse($3.join(), radix: 16);
              ///CODE_END
              }
            }
            break;
          }
          if (!success) {
            _ch = ch1;
            _cursor = pos1;
          }
          _startPos = startPos1;
          break;
        }
        break;
      case 1:
      case 2:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      _failure(const [null]);
    }
    return $$;
  }
  
  dynamic _parse_IDENTIFIER() {
    var $$;          
    var pos = _cursor;             
    if(_cachePos[14] >= pos) {
      $$ = _getFromCache(14);
      if($$ != null) {
        return $$[0];       
      }
    } else {
      _cachePos[14] = pos;
    }  
    _token = 7;    
    _tokenStart = _cursor;    
    switch (_getState(_transitions1)) {
      case 0:
      case 2:
        var ch0 = _ch, pos0 = _cursor, startPos0 = _startPos;
        _startPos = _cursor;
        while (true) {  
          $$ = _parse_IDENT_START();
          if (!success) break;
          var seq = new List(3)..[0] = $$;
          var testing0 = _testing; 
          for (var reps = []; ; ) {
            _testing = _cursor;
            $$ = _parse_IDENT_CONT();
            if (success) {  
              reps.add($$);
            } else {
              success = true;
              _testing = testing0;
              $$ = reps;
              break; 
            }
          }
          if (!success) break;
          seq[1] = $$;
          $$ = _parse_SPACING();
          if (!success) break;
          seq[2] = $$;
          $$ = seq;
          if (success) {    
            final $1 = seq[0];
            final $2 = seq[1];
            final $3 = seq[2];
            final $start = startPos0;
            var pos0 = _startPos, offset = $start;
            {
            ///CODE_START
            $$ = _flatten([$1, $2]).join();
            ///CODE_END
            }
          }
          break;
        }
        if (!success) {
          _ch = ch0;
          _cursor = pos0;
        }
        _startPos = startPos0;
        break;
      case 1:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      _failure(_expect0);
    }
    if (_cacheable[14]) {
      _addToCache($$, pos, 14);
    }    
    _token = null;
    _tokenStart = null;
    return $$;
  }
  
  dynamic _parse_IDENT_CONT() {
    var $$;
    switch (_getState(_transitions13)) {
      case 0:
        var startPos0 = _startPos;
        _startPos = _cursor;
        $$ = _matchRange(48, 57);
        _startPos = startPos0;
        break;
      case 1:
        var startPos1 = _startPos;
        _startPos = _cursor;
        $$ = _parse_IDENT_START();
        _startPos = startPos1;
        break;
      case 2:
      case 3:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      _failure(const [null]);
    }
    return $$;
  }
  
  dynamic _parse_IDENT_START() {
    var $$;
    switch (_getState(_transitions1)) {
      case 0:
        var startPos0 = _startPos;
        _startPos = _cursor;
        $$ = _matchMapping(65, 122, _mapping4);
        _startPos = startPos0;
        break;
      case 1:
      case 2:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      _failure(const [null]);
    }
    return $$;
  }
  
  dynamic _parse_LABEL() {
    var $$;
    _token = 11;  
    _tokenStart = _cursor;  
    switch (_getState(_transitions8)) {
      case 0:
      case 2:
        var ch0 = _ch, pos0 = _cursor, startPos0 = _startPos;
        _startPos = _cursor;
        while (true) {  
          switch (_getState(_transitions8)) {
            case 0:
            case 2:
              var ch1 = _ch, pos1 = _cursor, startPos1 = _startPos;
              _startPos = _cursor;
              while (true) {  
                $$ = _parse_ALPHA();
                if (!success) break;
                var seq = new List(2)..[0] = $$;
                var testing0 = _testing; 
                for (var reps = []; ; ) {
                  _testing = _cursor;
                  switch (_getState(_transitions9)) {
                    case 0:
                      var startPos2 = _startPos;
                      _startPos = _cursor;
                      $$ = _parse_DIGIT();
                      _startPos = startPos2;
                      break;
                    case 1:
                      var startPos3 = _startPos;
                      _startPos = _cursor;
                      $$ = _parse_ALPHA();
                      _startPos = startPos3;
                      break;
                    case 2:
                      var startPos4 = _startPos;
                      _startPos = _cursor;
                      $$ = _matchChar(95, '_');
                      _startPos = startPos4;
                      break;
                    case 3:
                    case 4:
                      $$ = null;
                      success = false;
                      break;
                  }
                  if (!success && _cursor > _testing) {
                    _failure(const [null]);
                  }
                  if (success) {  
                    reps.add($$);
                  } else {
                    success = true;
                    _testing = testing0;
                    $$ = reps;
                    break; 
                  }
                }
                if (!success) break;
                seq[1] = $$;
                $$ = seq;
                break;
              }
              if (!success) {
                _ch = ch1;
                _cursor = pos1;
              }
              _startPos = startPos1;
              break;
            case 1:
              $$ = null;
              success = false;
              break;
          }
          if (!success && _cursor > _testing) {
            _failure(const [null]);
          }
          if (!success) break;
          var seq = new List(3)..[0] = $$;
          $$ = _matchChar(58, ':');
          if (!success) break;
          seq[1] = $$;
          $$ = _parse_SPACING();
          if (!success) break;
          seq[2] = $$;
          $$ = seq;
          if (success) {    
            final $1 = seq[0];
            final $2 = seq[1];
            final $3 = seq[2];
            final $start = startPos0;
            var pos0 = _startPos, offset = $start;
            {
            ///CODE_START
            $$ = _text().replaceAll(': ', '');
            ///CODE_END
            }
          }
          break;
        }
        if (!success) {
          _ch = ch0;
          _cursor = pos0;
        }
        _startPos = startPos0;
        break;
      case 1:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      _failure(_expect15);
    }
    _token = null;
    _tokenStart = null;
    return $$;
  }
  
  dynamic _parse_LEADING_SPACES() {
    var $$;
    _token = 8;  
    _tokenStart = _cursor;  
    switch (_ch >= 0 && _ch <= 1114111 ? 0 : _ch == -1 ? 2 : 1) {
      case 0:
      case 2:
        var startPos0 = _startPos;
        _startPos = _cursor;
        $$ = _parse_SPACING();
        _startPos = startPos0;
        break;
      case 1:
        $$ = null;
        success = true;
        break;
    }
    if (!success && _cursor > _testing) {
      _failure(_expect12);
    }
    _token = null;
    _tokenStart = null;
    return $$;
  }
  
  dynamic _parse_LEFTARROW() {
    var $$;          
    var pos = _cursor;             
    if(_cachePos[16] >= pos) {
      $$ = _getFromCache(16);
      if($$ != null) {
        return $$[0];       
      }
    } else {
      _cachePos[16] = pos;
    }  
    _token = 9;    
    _tokenStart = _cursor;    
    switch (_ch == 60 ? 0 : _ch == -1 ? 2 : 1) {
      case 0:
      case 2:
        var ch0 = _ch, pos0 = _cursor, startPos0 = _startPos;
        _startPos = _cursor;
        while (true) {  
          $$ = _matchString(_strings2, '<-', false);
          if (!success) break;
          var seq = new List(2)..[0] = $$;
          $$ = _parse_SPACING();
          if (!success) break;
          seq[1] = $$;
          $$ = seq;
          break;
        }
        if (!success) {
          _ch = ch0;
          _cursor = pos0;
        }
        _startPos = startPos0;
        break;
      case 1:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      _failure(_expect13);
    }
    if (_cacheable[16]) {
      _addToCache($$, pos, 16);
    }    
    _token = null;
    _tokenStart = null;
    return $$;
  }
  
  dynamic _parse_LITERAL() {
    var $$;
    _token = 10;  
    _tokenStart = _cursor;  
    switch (_getState(_transitions7)) {
      case 0:
        var ch0 = _ch, pos0 = _cursor, startPos0 = _startPos;
        _startPos = _cursor;
        while (true) {  
          $$ = _matchChar(34, '\"');
          if (!success) break;
          var seq = new List(5)..[0] = $$;
          var testing0 = _testing; 
          for (var reps = []; ; ) {
            _testing = _cursor;
            switch (_ch >= 0 && _ch <= 1114111 ? 0 : _ch == -1 ? 2 : 1) {
              case 0:
              case 2:
                var ch1 = _ch, pos1 = _cursor, startPos1 = _startPos;
                _startPos = _cursor;
                while (true) {  
                  var ch2 = _ch, pos2 = _cursor, testing1 = _testing; 
                  _testing = _inputLen + 1;
                  $$ = _matchChar(34, '\"');
                  _ch = ch2;
                  _cursor = pos2; 
                  _testing = testing1;
                  $$ = null;
                  success = !success;
                  if (!success) break;
                  var seq = new List(2)..[0] = $$;
                  $$ = _parse_CHAR();
                  if (!success) break;
                  seq[1] = $$;
                  $$ = seq;
                  if (success) {    
                    final $1 = seq[0];
                    final $2 = seq[1];
                    final $start = startPos1;
                    var pos0 = _startPos, offset = $start;
                    {
                    ///CODE_START
                    $$ = $2;
                    ///CODE_END
                    }
                  }
                  break;
                }
                if (!success) {
                  _ch = ch1;
                  _cursor = pos1;
                }
                _startPos = startPos1;
                break;
              case 1:
                $$ = null;
                success = false;
                break;
            }
            if (!success && _cursor > _testing) {
              _failure(const [null]);
            }
            if (success) {  
              reps.add($$);
            } else {
              success = true;
              _testing = testing0;
              $$ = reps;
              break; 
            }
          }
          if (!success) break;
          seq[1] = $$;
          $$ = _matchChar(34, '\"');
          if (!success) break;
          seq[2] = $$;
          var testing2 = _testing;
          _testing = _cursor;
          $$ = _matchChar(105, 'i');
          success = true; 
          _testing = testing2;
          if (!success) break;
          seq[3] = $$;
          $$ = _parse_SPACING();
          if (!success) break;
          seq[4] = $$;
          $$ = seq;
          if (success) {    
            final $1 = seq[0];
            final $2 = seq[1];
            final $3 = seq[2];
            final $4 = seq[3];
            final $5 = seq[4];
            final $start = startPos0;
            var pos0 = _startPos, offset = $start;
            {
            ///CODE_START
            $$ = new LiteralExpression(new String.fromCharCodes($2))..setIgnoreCase($4.toString() == 'i');
            ///CODE_END
            }
          }
          break;
        }
        if (!success) {
          _ch = ch0;
          _cursor = pos0;
        }
        _startPos = startPos0;
        break;
      case 1:
        var ch3 = _ch, pos3 = _cursor, startPos2 = _startPos;
        _startPos = _cursor;
        while (true) {  
          $$ = _matchChar(39, '\'');
          if (!success) break;
          var seq = new List(5)..[0] = $$;
          var testing3 = _testing; 
          for (var reps = []; ; ) {
            _testing = _cursor;
            switch (_ch >= 0 && _ch <= 1114111 ? 0 : _ch == -1 ? 2 : 1) {
              case 0:
              case 2:
                var ch4 = _ch, pos4 = _cursor, startPos3 = _startPos;
                _startPos = _cursor;
                while (true) {  
                  var ch5 = _ch, pos5 = _cursor, testing4 = _testing; 
                  _testing = _inputLen + 1;
                  $$ = _matchChar(39, '\'');
                  _ch = ch5;
                  _cursor = pos5; 
                  _testing = testing4;
                  $$ = null;
                  success = !success;
                  if (!success) break;
                  var seq = new List(2)..[0] = $$;
                  $$ = _parse_CHAR();
                  if (!success) break;
                  seq[1] = $$;
                  $$ = seq;
                  if (success) {    
                    final $1 = seq[0];
                    final $2 = seq[1];
                    final $start = startPos3;
                    var pos0 = _startPos, offset = $start;
                    {
                    ///CODE_START
                    $$ = $2;
                    ///CODE_END
                    }
                  }
                  break;
                }
                if (!success) {
                  _ch = ch4;
                  _cursor = pos4;
                }
                _startPos = startPos3;
                break;
              case 1:
                $$ = null;
                success = false;
                break;
            }
            if (!success && _cursor > _testing) {
              _failure(const [null]);
            }
            if (success) {  
              reps.add($$);
            } else {
              success = true;
              _testing = testing3;
              $$ = reps;
              break; 
            }
          }
          if (!success) break;
          seq[1] = $$;
          $$ = _matchChar(39, '\'');
          if (!success) break;
          seq[2] = $$;
          var testing5 = _testing;
          _testing = _cursor;
          $$ = _matchChar(105, 'i');
          success = true; 
          _testing = testing5;
          if (!success) break;
          seq[3] = $$;
          $$ = _parse_SPACING();
          if (!success) break;
          seq[4] = $$;
          $$ = seq;
          if (success) {    
            final $1 = seq[0];
            final $2 = seq[1];
            final $3 = seq[2];
            final $4 = seq[3];
            final $5 = seq[4];
            final $start = startPos2;
            var pos0 = _startPos, offset = $start;
            {
            ///CODE_START
            $$ = new LiteralExpression(new String.fromCharCodes($2))..setIgnoreCase($4.toString() == 'i');
            ///CODE_END
            }
          }
          break;
        }
        if (!success) {
          _ch = ch3;
          _cursor = pos3;
        }
        _startPos = startPos2;
        break;
      case 2:
        $$ = null;
        success = false;
        break;
      case 3:
        while (true) {
          var ch6 = _ch, pos6 = _cursor, startPos4 = _startPos;
          _startPos = _cursor;
          while (true) {  
            $$ = _matchChar(39, '\'');
            if (!success) break;
            var seq = new List(5)..[0] = $$;
            var testing6 = _testing; 
            for (var reps = []; ; ) {
              _testing = _cursor;
              switch (_ch >= 0 && _ch <= 1114111 ? 0 : _ch == -1 ? 2 : 1) {
                case 0:
                case 2:
                  var ch7 = _ch, pos7 = _cursor, startPos5 = _startPos;
                  _startPos = _cursor;
                  while (true) {  
                    var ch8 = _ch, pos8 = _cursor, testing7 = _testing; 
                    _testing = _inputLen + 1;
                    $$ = _matchChar(39, '\'');
                    _ch = ch8;
                    _cursor = pos8; 
                    _testing = testing7;
                    $$ = null;
                    success = !success;
                    if (!success) break;
                    var seq = new List(2)..[0] = $$;
                    $$ = _parse_CHAR();
                    if (!success) break;
                    seq[1] = $$;
                    $$ = seq;
                    if (success) {    
                      final $1 = seq[0];
                      final $2 = seq[1];
                      final $start = startPos5;
                      var pos0 = _startPos, offset = $start;
                      {
                      ///CODE_START
                      $$ = $2;
                      ///CODE_END
                      }
                    }
                    break;
                  }
                  if (!success) {
                    _ch = ch7;
                    _cursor = pos7;
                  }
                  _startPos = startPos5;
                  break;
                case 1:
                  $$ = null;
                  success = false;
                  break;
              }
              if (!success && _cursor > _testing) {
                _failure(const [null]);
              }
              if (success) {  
                reps.add($$);
              } else {
                success = true;
                _testing = testing6;
                $$ = reps;
                break; 
              }
            }
            if (!success) break;
            seq[1] = $$;
            $$ = _matchChar(39, '\'');
            if (!success) break;
            seq[2] = $$;
            var testing8 = _testing;
            _testing = _cursor;
            $$ = _matchChar(105, 'i');
            success = true; 
            _testing = testing8;
            if (!success) break;
            seq[3] = $$;
            $$ = _parse_SPACING();
            if (!success) break;
            seq[4] = $$;
            $$ = seq;
            if (success) {    
              final $1 = seq[0];
              final $2 = seq[1];
              final $3 = seq[2];
              final $4 = seq[3];
              final $5 = seq[4];
              final $start = startPos4;
              var pos0 = _startPos, offset = $start;
              {
              ///CODE_START
              $$ = new LiteralExpression(new String.fromCharCodes($2))..setIgnoreCase($4.toString() == 'i');
              ///CODE_END
              }
            }
            break;
          }
          if (!success) {
            _ch = ch6;
            _cursor = pos6;
          }
          _startPos = startPos4;
          if (success) break;
          var ch9 = _ch, pos9 = _cursor, startPos6 = _startPos;
          _startPos = _cursor;
          while (true) {  
            $$ = _matchChar(34, '\"');
            if (!success) break;
            var seq = new List(5)..[0] = $$;
            var testing9 = _testing; 
            for (var reps = []; ; ) {
              _testing = _cursor;
              switch (_ch >= 0 && _ch <= 1114111 ? 0 : _ch == -1 ? 2 : 1) {
                case 0:
                case 2:
                  var ch10 = _ch, pos10 = _cursor, startPos7 = _startPos;
                  _startPos = _cursor;
                  while (true) {  
                    var ch11 = _ch, pos11 = _cursor, testing10 = _testing; 
                    _testing = _inputLen + 1;
                    $$ = _matchChar(34, '\"');
                    _ch = ch11;
                    _cursor = pos11; 
                    _testing = testing10;
                    $$ = null;
                    success = !success;
                    if (!success) break;
                    var seq = new List(2)..[0] = $$;
                    $$ = _parse_CHAR();
                    if (!success) break;
                    seq[1] = $$;
                    $$ = seq;
                    if (success) {    
                      final $1 = seq[0];
                      final $2 = seq[1];
                      final $start = startPos7;
                      var pos0 = _startPos, offset = $start;
                      {
                      ///CODE_START
                      $$ = $2;
                      ///CODE_END
                      }
                    }
                    break;
                  }
                  if (!success) {
                    _ch = ch10;
                    _cursor = pos10;
                  }
                  _startPos = startPos7;
                  break;
                case 1:
                  $$ = null;
                  success = false;
                  break;
              }
              if (!success && _cursor > _testing) {
                _failure(const [null]);
              }
              if (success) {  
                reps.add($$);
              } else {
                success = true;
                _testing = testing9;
                $$ = reps;
                break; 
              }
            }
            if (!success) break;
            seq[1] = $$;
            $$ = _matchChar(34, '\"');
            if (!success) break;
            seq[2] = $$;
            var testing11 = _testing;
            _testing = _cursor;
            $$ = _matchChar(105, 'i');
            success = true; 
            _testing = testing11;
            if (!success) break;
            seq[3] = $$;
            $$ = _parse_SPACING();
            if (!success) break;
            seq[4] = $$;
            $$ = seq;
            if (success) {    
              final $1 = seq[0];
              final $2 = seq[1];
              final $3 = seq[2];
              final $4 = seq[3];
              final $5 = seq[4];
              final $start = startPos6;
              var pos0 = _startPos, offset = $start;
              {
              ///CODE_START
              $$ = new LiteralExpression(new String.fromCharCodes($2))..setIgnoreCase($4.toString() == 'i');
              ///CODE_END
              }
            }
            break;
          }
          if (!success) {
            _ch = ch9;
            _cursor = pos9;
          }
          _startPos = startPos6;
          break;
        }
        break;
    }
    if (!success && _cursor > _testing) {
      _failure(_expect14);
    }
    _token = null;
    _tokenStart = null;
    return $$;
  }
  
  dynamic _parse_MEMBERS() {
    var $$;
    _token = 12;  
    _tokenStart = _cursor;  
    switch (_ch == 123 ? 0 : _ch == -1 ? 2 : 1) {
      case 0:
      case 2:
        var ch0 = _ch, pos0 = _cursor, startPos0 = _startPos;
        _startPos = _cursor;
        while (true) {  
          $$ = _matchChar(123, '{');
          if (!success) break;
          var seq = new List(4)..[0] = $$;
          var testing0 = _testing; 
          for (var reps = []; ; ) {
            _testing = _cursor;
            $$ = _parse_ACTION_BODY();
            if (success) {  
              reps.add($$);
            } else {
              success = true;
              _testing = testing0;
              $$ = reps;
              break; 
            }
          }
          if (!success) break;
          seq[1] = $$;
          $$ = _matchChar(125, '}');
          if (!success) break;
          seq[2] = $$;
          $$ = _parse_SPACING();
          if (!success) break;
          seq[3] = $$;
          $$ = seq;
          if (success) {    
            final $1 = seq[0];
            final $2 = seq[1];
            final $3 = seq[2];
            final $4 = seq[3];
            final $start = startPos0;
            var pos0 = _startPos, offset = $start;
            {
            ///CODE_START
            $$ = $2.join();
            ///CODE_END
            }
          }
          break;
        }
        if (!success) {
          _ch = ch0;
          _cursor = pos0;
        }
        _startPos = startPos0;
        break;
      case 1:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      _failure(_expect5);
    }
    _token = null;
    _tokenStart = null;
    return $$;
  }
  
  dynamic _parse_NOT() {
    var $$;
    _token = 13;  
    _tokenStart = _cursor;  
    switch (_ch == 33 ? 0 : _ch == -1 ? 2 : 1) {
      case 0:
      case 2:
        var ch0 = _ch, pos0 = _cursor, startPos0 = _startPos;
        _startPos = _cursor;
        while (true) {  
          $$ = _matchChar(33, '!');
          if (!success) break;
          var seq = new List(2)..[0] = $$;
          $$ = _parse_SPACING();
          if (!success) break;
          seq[1] = $$;
          $$ = seq;
          if (success) {    
            final $1 = seq[0];
            final $2 = seq[1];
            final $start = startPos0;
            var pos0 = _startPos, offset = $start;
            {
            ///CODE_START
            $$ = $1;
            ///CODE_END
            }
          }
          break;
        }
        if (!success) {
          _ch = ch0;
          _cursor = pos0;
        }
        _startPos = startPos0;
        break;
      case 1:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      _failure(_expect16);
    }
    _token = null;
    _tokenStart = null;
    return $$;
  }
  
  dynamic _parse_OPEN() {
    var $$;
    _token = 14;  
    _tokenStart = _cursor;  
    switch (_ch == 40 ? 0 : _ch == -1 ? 2 : 1) {
      case 0:
      case 2:
        var ch0 = _ch, pos0 = _cursor, startPos0 = _startPos;
        _startPos = _cursor;
        while (true) {  
          $$ = _matchChar(40, '(');
          if (!success) break;
          var seq = new List(2)..[0] = $$;
          $$ = _parse_SPACING();
          if (!success) break;
          seq[1] = $$;
          $$ = seq;
          break;
        }
        if (!success) {
          _ch = ch0;
          _cursor = pos0;
        }
        _startPos = startPos0;
        break;
      case 1:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      _failure(_expect17);
    }
    _token = null;
    _tokenStart = null;
    return $$;
  }
  
  dynamic _parse_PLUS() {
    var $$;
    _token = 15;  
    _tokenStart = _cursor;  
    switch (_ch == 43 ? 0 : _ch == -1 ? 2 : 1) {
      case 0:
      case 2:
        var ch0 = _ch, pos0 = _cursor, startPos0 = _startPos;
        _startPos = _cursor;
        while (true) {  
          $$ = _matchChar(43, '+');
          if (!success) break;
          var seq = new List(2)..[0] = $$;
          $$ = _parse_SPACING();
          if (!success) break;
          seq[1] = $$;
          $$ = seq;
          if (success) {    
            final $1 = seq[0];
            final $2 = seq[1];
            final $start = startPos0;
            var pos0 = _startPos, offset = $start;
            {
            ///CODE_START
            $$ = $1;
            ///CODE_END
            }
          }
          break;
        }
        if (!success) {
          _ch = ch0;
          _cursor = pos0;
        }
        _startPos = startPos0;
        break;
      case 1:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      _failure(_expect18);
    }
    _token = null;
    _tokenStart = null;
    return $$;
  }
  
  dynamic _parse_Prefix() {
    var $$;
    switch (_getState(_transitions2)) {
      case 0:
      case 2:
        var ch0 = _ch, pos0 = _cursor, startPos0 = _startPos;
        _startPos = _cursor;
        while (true) {  
          var testing0 = _testing;
          _testing = _cursor;
          $$ = _parse_LABEL();
          success = true; 
          _testing = testing0;
          if (!success) break;
          var seq = new List(4)..[0] = $$;
          var testing1 = _testing;
          _testing = _cursor;
          switch (_getState(_transitions3)) {
            case 0:
              var startPos1 = _startPos;
              _startPos = _cursor;
              $$ = _parse_NOT();
              _startPos = startPos1;
              break;
            case 1:
              var startPos2 = _startPos;
              _startPos = _cursor;
              $$ = _parse_AND();
              _startPos = startPos2;
              break;
            case 2:
              $$ = null;
              success = false;
              break;
            case 3:
              while (true) {
                var startPos3 = _startPos;
                _startPos = _cursor;
                $$ = _parse_AND();
                _startPos = startPos3;
                if (success) break;
                var startPos4 = _startPos;
                _startPos = _cursor;
                $$ = _parse_NOT();
                _startPos = startPos4;
                break;
              }
              break;
          }
          if (!success && _cursor > _testing) {
            _failure(_expect3);
          }
          success = true; 
          _testing = testing1;
          if (!success) break;
          seq[1] = $$;
          $$ = _parse_Suffix();
          if (!success) break;
          seq[2] = $$;
          var testing2 = _testing;
          _testing = _cursor;
          $$ = _parse_ACTION();
          success = true; 
          _testing = testing2;
          if (!success) break;
          seq[3] = $$;
          $$ = seq;
          if (success) {    
            final $1 = seq[0];
            final $2 = seq[1];
            final $3 = seq[2];
            final $4 = seq[3];
            final $start = startPos0;
            var pos0 = _startPos, offset = $start;
            {
            ///CODE_START
            $$ = _prefix($2, $3, $4, $1);
            ///CODE_END
            }
          }
          break;
        }
        if (!success) {
          _ch = ch0;
          _cursor = pos0;
        }
        _startPos = startPos0;
        break;
      case 1:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      _failure(_expect1);
    }
    return $$;
  }
  
  dynamic _parse_Primary() {
    var $$;
    switch (_getState(_transitions6)) {
      case 0:
        var startPos0 = _startPos;
        _startPos = _cursor;
        $$ = _parse_LITERAL();
        _startPos = startPos0;
        break;
      case 1:
        var ch0 = _ch, pos0 = _cursor, startPos1 = _startPos;
        _startPos = _cursor;
        while (true) {  
          $$ = _parse_OPEN();
          if (!success) break;
          var seq = new List(3)..[0] = $$;
          $$ = _parse_Expression();
          if (!success) break;
          seq[1] = $$;
          $$ = _parse_CLOSE();
          if (!success) break;
          seq[2] = $$;
          $$ = seq;
          if (success) {    
            final $1 = seq[0];
            final $2 = seq[1];
            final $3 = seq[2];
            final $start = startPos1;
            var pos0 = _startPos, offset = $start;
            {
            ///CODE_START
            $$ = $2;
            ///CODE_END
            }
          }
          break;
        }
        if (!success) {
          _ch = ch0;
          _cursor = pos0;
        }
        _startPos = startPos1;
        break;
      case 2:
        var startPos2 = _startPos;
        _startPos = _cursor;
        $$ = _parse_DOT();
        if (success) {    
          final $1 = $$;
          final $start = startPos2;
          var pos0 = _startPos, offset = $start;
          {
          ///CODE_START
          $$ = new AnyCharacterExpression();
          ///CODE_END
          }
        }
        _startPos = startPos2;
        break;
      case 3:
        var ch1 = _ch, pos1 = _cursor, startPos3 = _startPos;
        _startPos = _cursor;
        while (true) {  
          $$ = _parse_IDENTIFIER();
          if (!success) break;
          var seq = new List(2)..[0] = $$;
          var ch2 = _ch, pos2 = _cursor, testing0 = _testing; 
          _testing = _inputLen + 1;
          $$ = _parse_LEFTARROW();
          _ch = ch2;
          _cursor = pos2; 
          _testing = testing0;
          $$ = null;
          success = !success;
          if (!success) break;
          seq[1] = $$;
          $$ = seq;
          if (success) {    
            final $1 = seq[0];
            final $2 = seq[1];
            final $start = startPos3;
            var pos0 = _startPos, offset = $start;
            {
            ///CODE_START
            $$ = new RuleExpression($1);
            ///CODE_END
            }
          }
          break;
        }
        if (!success) {
          _ch = ch1;
          _cursor = pos1;
        }
        _startPos = startPos3;
        break;
      case 4:
        var startPos4 = _startPos;
        _startPos = _cursor;
        $$ = _parse_CLASS();
        _startPos = startPos4;
        break;
      case 5:
        $$ = null;
        success = false;
        break;
      case 6:
        while (true) {
          var ch3 = _ch, pos3 = _cursor, startPos5 = _startPos;
          _startPos = _cursor;
          while (true) {  
            $$ = _parse_IDENTIFIER();
            if (!success) break;
            var seq = new List(2)..[0] = $$;
            var ch4 = _ch, pos4 = _cursor, testing1 = _testing; 
            _testing = _inputLen + 1;
            $$ = _parse_LEFTARROW();
            _ch = ch4;
            _cursor = pos4; 
            _testing = testing1;
            $$ = null;
            success = !success;
            if (!success) break;
            seq[1] = $$;
            $$ = seq;
            if (success) {    
              final $1 = seq[0];
              final $2 = seq[1];
              final $start = startPos5;
              var pos0 = _startPos, offset = $start;
              {
              ///CODE_START
              $$ = new RuleExpression($1);
              ///CODE_END
              }
            }
            break;
          }
          if (!success) {
            _ch = ch3;
            _cursor = pos3;
          }
          _startPos = startPos5;
          if (success) break;
          var ch5 = _ch, pos5 = _cursor, startPos6 = _startPos;
          _startPos = _cursor;
          while (true) {  
            $$ = _parse_OPEN();
            if (!success) break;
            var seq = new List(3)..[0] = $$;
            $$ = _parse_Expression();
            if (!success) break;
            seq[1] = $$;
            $$ = _parse_CLOSE();
            if (!success) break;
            seq[2] = $$;
            $$ = seq;
            if (success) {    
              final $1 = seq[0];
              final $2 = seq[1];
              final $3 = seq[2];
              final $start = startPos6;
              var pos0 = _startPos, offset = $start;
              {
              ///CODE_START
              $$ = $2;
              ///CODE_END
              }
            }
            break;
          }
          if (!success) {
            _ch = ch5;
            _cursor = pos5;
          }
          _startPos = startPos6;
          if (success) break;
          var startPos7 = _startPos;
          _startPos = _cursor;
          $$ = _parse_LITERAL();
          _startPos = startPos7;
          if (success) break;
          var startPos8 = _startPos;
          _startPos = _cursor;
          $$ = _parse_CLASS();
          _startPos = startPos8;
          if (success) break;
          var startPos9 = _startPos;
          _startPos = _cursor;
          $$ = _parse_DOT();
          if (success) {    
            final $1 = $$;
            final $start = startPos9;
            var pos0 = _startPos, offset = $start;
            {
            ///CODE_START
            $$ = new AnyCharacterExpression();
            ///CODE_END
            }
          }
          _startPos = startPos9;
          break;
        }
        break;
    }
    if (!success && _cursor > _testing) {
      _failure(_expect1);
    }
    return $$;
  }
  
  dynamic _parse_QUESTION() {
    var $$;
    _token = 16;  
    _tokenStart = _cursor;  
    switch (_ch == 63 ? 0 : _ch == -1 ? 2 : 1) {
      case 0:
      case 2:
        var ch0 = _ch, pos0 = _cursor, startPos0 = _startPos;
        _startPos = _cursor;
        while (true) {  
          $$ = _matchChar(63, '?');
          if (!success) break;
          var seq = new List(2)..[0] = $$;
          $$ = _parse_SPACING();
          if (!success) break;
          seq[1] = $$;
          $$ = seq;
          if (success) {    
            final $1 = seq[0];
            final $2 = seq[1];
            final $start = startPos0;
            var pos0 = _startPos, offset = $start;
            {
            ///CODE_START
            $$ = $1;
            ///CODE_END
            }
          }
          break;
        }
        if (!success) {
          _ch = ch0;
          _cursor = pos0;
        }
        _startPos = startPos0;
        break;
      case 1:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      _failure(_expect19);
    }
    _token = null;
    _tokenStart = null;
    return $$;
  }
  
  dynamic _parse_RANGE() {
    var $$;
    switch (_ch >= 0 && _ch <= 1114111 ? 0 : _ch == -1 ? 2 : 1) {
      case 0:
      case 2:
        while (true) {
          var ch0 = _ch, pos0 = _cursor, startPos0 = _startPos;
          _startPos = _cursor;
          while (true) {  
            $$ = _parse_CHAR();
            if (!success) break;
            var seq = new List(3)..[0] = $$;
            $$ = _matchChar(45, '-');
            if (!success) break;
            seq[1] = $$;
            $$ = _parse_CHAR();
            if (!success) break;
            seq[2] = $$;
            $$ = seq;
            if (success) {    
              final $1 = seq[0];
              final $2 = seq[1];
              final $3 = seq[2];
              final $start = startPos0;
              var pos0 = _startPos, offset = $start;
              {
              ///CODE_START
              $$ = [$1, $3];
              ///CODE_END
              }
            }
            break;
          }
          if (!success) {
            _ch = ch0;
            _cursor = pos0;
          }
          _startPos = startPos0;
          if (success) break;
          var startPos1 = _startPos;
          _startPos = _cursor;
          $$ = _parse_CHAR();
          if (success) {    
            final $1 = $$;
            final $start = startPos1;
            var pos0 = _startPos, offset = $start;
            {
            ///CODE_START
            $$ = [$1, $1];
            ///CODE_END
            }
          }
          _startPos = startPos1;
          break;
        }
        break;
      case 1:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      _failure(const [null]);
    }
    return $$;
  }
  
  dynamic _parse_SLASH() {
    var $$;
    _token = 17;  
    _tokenStart = _cursor;  
    switch (_ch == 47 ? 0 : _ch == -1 ? 2 : 1) {
      case 0:
      case 2:
        var ch0 = _ch, pos0 = _cursor, startPos0 = _startPos;
        _startPos = _cursor;
        while (true) {  
          $$ = _matchChar(47, '/');
          if (!success) break;
          var seq = new List(2)..[0] = $$;
          $$ = _parse_SPACING();
          if (!success) break;
          seq[1] = $$;
          $$ = seq;
          break;
        }
        if (!success) {
          _ch = ch0;
          _cursor = pos0;
        }
        _startPos = startPos0;
        break;
      case 1:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      _failure(_expect2);
    }
    _token = null;
    _tokenStart = null;
    return $$;
  }
  
  dynamic _parse_SPACE() {
    var $$;
    switch (_getState(_transitions14)) {
      case 0:
        var startPos0 = _startPos;
        _startPos = _cursor;
        $$ = _matchMapping(9, 32, _mapping5);
        _startPos = startPos0;
        break;
      case 1:
        var startPos1 = _startPos;
        _startPos = _cursor;
        $$ = _parse_EOL();
        _startPos = startPos1;
        break;
      case 2:
      case 3:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      _failure(const [null]);
    }
    return $$;
  }
  
  dynamic _parse_SPACING() {
    var $$;
    switch (_ch >= 0 && _ch <= 1114111 ? 0 : _ch == -1 ? 2 : 1) {
      case 0:
      case 2:
        var startPos0 = _startPos;
        _startPos = _cursor;
        var testing0 = _testing; 
        for (var reps = []; ; ) {
          _testing = _cursor;
          switch (_getState(_transitions15)) {
            case 0:
              var startPos1 = _startPos;
              _startPos = _cursor;
              $$ = _parse_SPACE();
              _startPos = startPos1;
              break;
            case 1:
            case 3:
              var startPos2 = _startPos;
              _startPos = _cursor;
              $$ = _parse_COMMENT();
              _startPos = startPos2;
              break;
            case 2:
              $$ = null;
              success = false;
              break;
          }
          if (!success && _cursor > _testing) {
            _failure(const [null]);
          }
          if (success) {  
            reps.add($$);
          } else {
            success = true;
            _testing = testing0;
            $$ = reps;
            break; 
          }
        }
        _startPos = startPos0;
        break;
      case 1:
        $$ = null;
        success = true;
        break;
    }
    if (!success && _cursor > _testing) {
      _failure(_expect22);
    }
    return $$;
  }
  
  dynamic _parse_STAR() {
    var $$;
    _token = 18;  
    _tokenStart = _cursor;  
    switch (_ch == 42 ? 0 : _ch == -1 ? 2 : 1) {
      case 0:
      case 2:
        var ch0 = _ch, pos0 = _cursor, startPos0 = _startPos;
        _startPos = _cursor;
        while (true) {  
          $$ = _matchChar(42, '*');
          if (!success) break;
          var seq = new List(2)..[0] = $$;
          $$ = _parse_SPACING();
          if (!success) break;
          seq[1] = $$;
          $$ = seq;
          if (success) {    
            final $1 = seq[0];
            final $2 = seq[1];
            final $start = startPos0;
            var pos0 = _startPos, offset = $start;
            {
            ///CODE_START
            $$ = $1;
            ///CODE_END
            }
          }
          break;
        }
        if (!success) {
          _ch = ch0;
          _cursor = pos0;
        }
        _startPos = startPos0;
        break;
      case 1:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      _failure(_expect20);
    }
    _token = null;
    _tokenStart = null;
    return $$;
  }
  
  dynamic _parse_Sequence() {
    var $$;          
    var pos = _cursor;             
    if(_cachePos[3] >= pos) {
      $$ = _getFromCache(3);
      if($$ != null) {
        return $$[0];       
      }
    } else {
      _cachePos[3] = pos;
    }  
    switch (_getState(_transitions2)) {
      case 0:
      case 2:
        var startPos0 = _startPos;
        _startPos = _cursor;
        var testing0;
        for (var first = true, reps; ;) {  
          $$ = _parse_Prefix();  
          if (success) {
           if (first) {      
              first = false;
              reps = [$$];
              testing0 = _testing;                  
            } else {
              reps.add($$);
            }
            _testing = _cursor;   
          } else {
            success = !first;
            if (success) {      
              _testing = testing0;
              $$ = reps;      
            } else $$ = null;
            break;
          }  
        }
        if (success) {    
          final $1 = $$;
          final $start = startPos0;
          var pos0 = _startPos, offset = $start;
          {
          ///CODE_START
          $$ = new SequenceExpression($1);
          ///CODE_END
          }
        }
        _startPos = startPos0;
        break;
      case 1:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      _failure(_expect1);
    }
    if (_cacheable[3]) {
      _addToCache($$, pos, 3);
    }    
    return $$;
  }
  
  dynamic _parse_Suffix() {
    var $$;
    switch (_getState(_transitions4)) {
      case 0:
      case 2:
        var ch0 = _ch, pos0 = _cursor, startPos0 = _startPos;
        _startPos = _cursor;
        while (true) {  
          $$ = _parse_Primary();
          if (!success) break;
          var seq = new List(2)..[0] = $$;
          var testing0 = _testing;
          _testing = _cursor;
          switch (_getState(_transitions5)) {
            case 0:
              var startPos1 = _startPos;
              _startPos = _cursor;
              $$ = _parse_STAR();
              _startPos = startPos1;
              break;
            case 1:
              var startPos2 = _startPos;
              _startPos = _cursor;
              $$ = _parse_PLUS();
              _startPos = startPos2;
              break;
            case 2:
              var startPos3 = _startPos;
              _startPos = _cursor;
              $$ = _parse_QUESTION();
              _startPos = startPos3;
              break;
            case 3:
              $$ = null;
              success = false;
              break;
            case 4:
              while (true) {
                var startPos4 = _startPos;
                _startPos = _cursor;
                $$ = _parse_QUESTION();
                _startPos = startPos4;
                if (success) break;
                var startPos5 = _startPos;
                _startPos = _cursor;
                $$ = _parse_STAR();
                _startPos = startPos5;
                if (success) break;
                var startPos6 = _startPos;
                _startPos = _cursor;
                $$ = _parse_PLUS();
                _startPos = startPos6;
                break;
              }
              break;
          }
          if (!success && _cursor > _testing) {
            _failure(_expect4);
          }
          success = true; 
          _testing = testing0;
          if (!success) break;
          seq[1] = $$;
          $$ = seq;
          if (success) {    
            final $1 = seq[0];
            final $2 = seq[1];
            final $start = startPos0;
            var pos0 = _startPos, offset = $start;
            {
            ///CODE_START
            $$ = _suffix($2, $1);
            ///CODE_END
            }
          }
          break;
        }
        if (!success) {
          _ch = ch0;
          _cursor = pos0;
        }
        _startPos = startPos0;
        break;
      case 1:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      _failure(_expect1);
    }
    return $$;
  }
  
  String _text([int offset = 0]) {
    return new String.fromCharCodes(_input.sublist(_startPos + offset, _cursor));
  }
  
  int _toCodePoint(String string) {
    if (string == null) {
      throw new ArgumentError("string: $string");
    }
  
    var length = string.length;
    if (length == 0) {
      throw new StateError("An empty string contains no elements.");
    }
  
    var start = string.codeUnitAt(0);
    if (length == 1) {
      return start;
    }
  
    if ((start & 0xFC00) == 0xD800) {
      var end = string.codeUnitAt(1);
      if ((end & 0xFC00) == 0xDC00) {
        return (0x10000 + ((start & 0x3FF) << 10) + (end & 0x3FF));
      }
    }
  
    return start;
  }
  
  List<int> _toCodePoints(String string) {
    if (string == null) {
      throw new ArgumentError("string: $string");
    }
  
    var length = string.length;
    if (length == 0) {
      return const <int>[];
    }
  
    var codePoints = <int>[];
    codePoints.length = length;
    var i = 0;
    var pos = 0;
    for ( ; i < length; pos++) {
      var start = string.codeUnitAt(i);
      i++;
      if ((start & 0xFC00) == 0xD800 && i < length) {
        var end = string.codeUnitAt(i);
        if ((end & 0xFC00) == 0xDC00) {
          codePoints[pos] = (0x10000 + ((start & 0x3FF) << 10) + (end & 0x3FF));
          i++;
        } else {
          codePoints[pos] = start;
        }
      } else {
        codePoints[pos] = start;
      }
    }
  
    codePoints.length = pos;
    return codePoints;
  }
  
  static List<bool> _unmap(List<int> mapping) {
    var length = mapping.length;
    var result = new List<bool>(length * 31);
    var offset = 0;
    for (var i = 0; i < length; i++) {
      var v = mapping[i];
      for (var j = 0; j < 31; j++) {
        result[offset++] = v & (1 << j) == 0 ? false : true;
      }
    }
    return result;
  }
  
  List<PegParserError> errors() {
    if (success) {
      return <PegParserError>[];
    }
  
    String escape(int c) {
      switch (c) {
        case 10:
          return r"\n";
        case 13:
          return r"\r";
        case 09:
          return r"\t";
        case -1:
          return "";
      }
      return new String.fromCharCode(c);
    } 
    
    String getc(int position) {  
      if (position < _inputLen) {
        return "'${escape(_input[position])}'";      
      }       
      return "end of file";
    }
  
    var errors = <PegParserError>[];
    if (_failurePos >= _cursor) {
      var set = new Set<PegParserError>();
      set.addAll(_errors);
      for (var error in set) {
        if (error.position >= _failurePos) {
          errors.add(error);
        }
      }
      var names = new Set<String>();  
      names.addAll(_expected);
      if (names.contains(null)) {
        var string = getc(_failurePos);
        var message = "Unexpected $string";
        var error = new PegParserError(PegParserError.UNEXPECTED, _failurePos, _failurePos, message);
        errors.add(error);
      } else {      
        var found = getc(_failurePos);      
        var list = names.toList();
        list.sort();
        var message = "Expected ${list.join(", ")} but found $found";
        var error = new PegParserError(PegParserError.EXPECTED, _failurePos, _failurePos, message);
        errors.add(error);
      }        
    }
    errors.sort((a, b) => a.position.compareTo(b.position));
    return errors;  
  }
  
  dynamic parse_Grammar() {
    var $$;
    switch (_getState(_transitions0)) {
      case 0:
      case 2:
        var ch0 = _ch, pos0 = _cursor, startPos0 = _startPos;
        _startPos = _cursor;
        while (true) {  
          var testing0 = _testing;
          _testing = _cursor;
          $$ = _parse_LEADING_SPACES();
          success = true; 
          _testing = testing0;
          if (!success) break;
          var seq = new List(5)..[0] = $$;
          var testing1 = _testing;
          _testing = _cursor;
          $$ = _parse_GLOBALS();
          success = true; 
          _testing = testing1;
          if (!success) break;
          seq[1] = $$;
          var testing2 = _testing;
          _testing = _cursor;
          $$ = _parse_MEMBERS();
          success = true; 
          _testing = testing2;
          if (!success) break;
          seq[2] = $$;
          var testing3;
          for (var first = true, reps; ;) {  
            $$ = _parse_Definition();  
            if (success) {
             if (first) {      
                first = false;
                reps = [$$];
                testing3 = _testing;                  
              } else {
                reps.add($$);
              }
              _testing = _cursor;   
            } else {
              success = !first;
              if (success) {      
                _testing = testing3;
                $$ = reps;      
              } else $$ = null;
              break;
            }  
          }
          if (!success) break;
          seq[3] = $$;
          $$ = _parse_EOF();
          if (!success) break;
          seq[4] = $$;
          $$ = seq;
          if (success) {    
            final $1 = seq[0];
            final $2 = seq[1];
            final $3 = seq[2];
            final $4 = seq[3];
            final $5 = seq[4];
            final $start = startPos0;
            var pos0 = _startPos, offset = $start;
            {
            ///CODE_START
            $$ = new Grammar($4, $2, $3);
            ///CODE_END
            }
          }
          break;
        }
        if (!success) {
          _ch = ch0;
          _cursor = pos0;
        }
        _startPos = startPos0;
        break;
      case 1:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      _failure(_expect0);
    }
    return $$;
  }
  
  void reset(int pos) {
    if (pos == null) {
      throw new ArgumentError('pos: $pos');
    }
    if (pos < 0 || pos > _inputLen) {
      throw new RangeError('pos');
    }      
    _cursor = pos;
    _cache = new List<Map<int, List>>(40);
    _cachePos = new List<int>.filled(40, -1);  
    _cacheable = new List<bool>.filled(40, false);
    _ch = -1;
    _errors = <PegParserError>[];   
    _expected = <String>[];
    _failurePos = -1;
    _startPos = pos;        
    _testing = -1;
    _token = null;
    _tokenStart = null;  
    if (_cursor < _inputLen) {
      _ch = _input[_cursor];
    }
    success = true;    
  }
  
  dynamic parse_Grammar2() { 
    // SENTENCE (NONTERMINAL) 
    // Grammar <- LEADING_SPACES? GLOBALS? MEMBERS? Definition+ EOF 
    var $$; 
    // => LEADING_SPACES? GLOBALS? MEMBERS? Definition+ EOF # Choice 
    switch (_ch >= 0 && _ch <= 1114111 ? 0 : _ch == -1 ? 2 : 1) { 
      // [\u0000-\u0010ffff] 
      // EOF 
      case 0: 
      case 2: 
        // => LEADING_SPACES? GLOBALS? MEMBERS? Definition+ EOF # Sequence 
        var ch0 = _ch, pos0 = _cursor, startPos0 = _startPos; 
        _startPos = _cursor; 
        while (true) {   
          // => LEADING_SPACES? 
          var testing0 = _testing; 
          _testing = _cursor; 
          // => LEADING_SPACES 
          $$ = _parse_LEADING_SPACES(); 
          // <= LEADING_SPACES 
          success = true;  
          _testing = testing0; 
          // <= LEADING_SPACES? 
          if (!success) break; 
          var seq = new List(5)..[0] = $$; 
          // => GLOBALS? 
          var testing1 = _testing; 
          _testing = _cursor; 
          // => GLOBALS 
          $$ = _parse_GLOBALS(); 
          // <= GLOBALS 
          success = true;  
          _testing = testing1; 
          // <= GLOBALS? 
          if (!success) break; 
          seq[1] = $$; 
          // => MEMBERS? 
          var testing2 = _testing; 
          _testing = _cursor; 
          // => MEMBERS 
          $$ = _parse_MEMBERS(); 
          // <= MEMBERS 
          success = true;  
          _testing = testing2; 
          // <= MEMBERS? 
          if (!success) break; 
          seq[2] = $$; 
          // => Definition+ 
          var testing3; 
          for (var first = true, reps; ;) {   
            // => Definition   
            $$ = _parse_Definition();   
            // <= Definition   
            if (success) { 
             if (first) {       
                first = false; 
                reps = [$$]; 
                testing3 = _testing;                   
              } else { 
                reps.add($$); 
              } 
              _testing = _cursor;    
            } else { 
              success = !first; 
              if (success) {       
                _testing = testing3; 
                $$ = reps;       
              } else $$ = null; 
              break; 
            }   
          } 
          // <= Definition+ 
          if (!success) break; 
          seq[3] = $$; 
          // => EOF 
          $$ = _parse_EOF(); 
          // <= EOF 
          if (!success) break; 
          seq[4] = $$; 
          $$ = seq; 
          if (success) {     
            // LEADING_SPACES? 
            final $1 = seq[0]; 
            // GLOBALS? 
            final $2 = seq[1]; 
            // MEMBERS? 
            final $3 = seq[2]; 
            // Definition+ 
            final $4 = seq[3]; 
            // EOF 
            final $5 = seq[4]; 
            final $start = startPos0; 
            $$ = new Grammar($4, $2, $3); 
          } 
          break; 
        } 
        if (!success) { 
          _ch = ch0; 
          _cursor = pos0; 
        } 
        _startPos = startPos0; 
        // <= LEADING_SPACES? GLOBALS? MEMBERS? Definition+ EOF # Sequence 
        break; 
      // No matches 
      case 1: 
        $$ = null; 
        success = false; 
        break; 
    } 
    if (!success && _cursor > _testing) { 
      // Expected: IDENTIFIER 
      _failure(_expect0); 
    } 
    // <= LEADING_SPACES? GLOBALS? MEMBERS? Definition+ EOF # Choice 
    return $$; 
  } 
}

class PegParserError {
  static const int EXPECTED = 1;    
      
  static const int MALFORMED = 2;    
      
  static const int MISSING = 3;    
      
  static const int UNEXPECTED = 4;    
      
  static const int UNTERMINATED = 5;    
      
  final int hashCode = 0;
  
  final String message;
  
  final int position;
  
  final int start;
  
  final int type;
  
  PegParserError(this.type, this.position, this.start, this.message);
  
  bool operator ==(other) {
    if (identical(this, other)) return true;
    if (other is PegParserError) {
      return type == other.type && position == other.position &&
      start == other.start && message == other.message;  
    }
    return false;
  }
  
}

